import os
import re
import uuid
import asyncio
import logging
from typing import Dict, Optional, Any
from dotenv import load_dotenv
import httpx

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ConversationHandler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'logs')
os.makedirs(log_dir, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler(os.path.join(log_dir, 'bot.log'), encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_URL = os.getenv('API_URL', 'http://demo.nikta.ai/llm/api/run')
API_LOGIN_URL = 'https://demo.nikta.ai/llm/api/login'
API_EMAIL = 'admin@nikta.ai'
API_PASSWORD = 'lAz32RA9B'
REPORT_CHANNEL_ID = -1003126524033

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(CHOOSING_PREDICTION, CHOOSING_SPHERE, WAITING_CUSTOM_SPHERE, WAITING_API_RESPONSE, 
 CHOOSING_ACTION, WAITING_NAME, CHOOSING_CONTACT_TYPE, 
 WAITING_EMAIL, WAITING_PHONE, IN_CHAT_MODE) = range(10)

# –¢–µ–∫—Å—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
PREDICTIONS = [
    "+40% —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏",
    "+25% –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã",
    "–ú–∏–Ω—É—Å 30% –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª",
    "–•2 —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫",
    "+15 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é —Å–≤–æ–±–æ–¥—ã",
    "–†–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å–æ–∫—Ä–∞—â—ë–Ω –Ω–∞ 2 —á–∞—Å–∞",
    "90% —Ä—É—Ç–∏–Ω—ã –∏—Å—á–µ–∑–ª–æ",
    "–í—Å–µ –æ—Ç—á—ë—Ç—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∑–∞ 1 –∫–ª–∏–∫",
    "–ù–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è —Ç–µ–±—è",
    "+300% —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤",
    "–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞–ª–∞ –≤ 3 —Ä–∞–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ",
    "–õ–æ—è–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤—ã—Ä–æ—Å–ª–∞ –¥–æ 95%"
]

# –°—Ñ–µ—Ä—ã –±–∏–∑–Ω–µ—Å–∞
SPHERES = [
    "üõç –†–∏—Ç–µ–π–ª / eCom",
    "üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
    "üßë‚Äçüè´ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "üß≥ –¢—É—Ä–∏–∑–º / –°–µ—Ä–≤–∏—Å—ã",
    "üíº IT / –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "üèó –î—Ä—É–≥–æ–µ"
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_storage: Dict[int, Dict] = {}


async def get_auth_token() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API."""
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(
                API_LOGIN_URL,
                json={
                    "email": API_EMAIL,
                    "password": API_PASSWORD
                }
            )
            response.raise_for_status()
            data = response.json()
            token = data.get("token", "")
            if not token:
                logger.error("Token not found in API response")
            return token
    except Exception as e:
        logger.error(f"Error getting auth token: {e}")
        return ""


def get_user_data(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in user_data_storage:
        user_data_storage[user_id] = {
            'dialog_id': str(uuid.uuid4()),
            'prediction': None,
            'sphere': None,
            'name': None,
            'contact': None,
            'last_button_message_id': None,
            'messages_to_delete': [],
            'prediction_history': []  # –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ —Å—Ñ–µ—Ä
        }
    return user_data_storage[user_id]


def reset_user_data(user_id: int) -> None:
    """–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–æ–≤–æ–º /start."""
    if user_id in user_data_storage:
        del user_data_storage[user_id]


def parse_api_response(api_data: Dict[str, Any]) -> list[str]:
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    –¢–µ–≥–∏ <br>...</br> –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –≥—Ä–∞–Ω–∏—Ü—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    if not isinstance(api_data, dict):
        return [str(api_data)]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–µ result
    result = api_data.get('result', '')
    
    if not result:
        # –ï—Å–ª–∏ result –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
        if 'response' in api_data:
            result = api_data['response']
        elif 'content' in api_data:
            result = api_data['content']
        elif 'message' in api_data:
            result = api_data['message']
        else:
            return ["–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–µ–≥–∞–º <br>...</br>
    # –ü–∞—Ç—Ç–µ—Ä–Ω: <br> (–ª—é–±–æ–π —Ç–µ–∫—Å—Ç) </br>
    pattern = r'<br\s*/?>\s*(.*?)\s*</br>'
    matches = re.findall(pattern, result, flags=re.IGNORECASE | re.DOTALL)
    
    if not matches:
        # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –û—á–∏—â–∞–µ–º –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–¥–∏–Ω–æ—á–Ω—ã—Ö <br> —Ç–µ–≥–æ–≤
        result = re.sub(r'<br\s*/?>', '\n', result, flags=re.IGNORECASE)
        result = re.sub(r'</br>', '', result, flags=re.IGNORECASE)
        result = result.strip()
        return [result] if result else []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages = []
    for match in matches:
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        message = match.strip()
        if message:
            messages.append(message)
    
    return messages


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = update.effective_user.id
    
    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–æ–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
    reset_user_data(user_id)
    user_data = get_user_data(user_id)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ 1
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø ‚Äî Nikta Oracle, –±–∏–∑–Ω–µ—Å-–æ—Ä–∞–∫—É–ª –æ—Ç Nikta.ai.\n"
        "–ó–∞ 60 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∂—É, —á—Ç–æ –∂–¥—ë—Ç —Ç–≤–æ–π –±–∏–∑–Ω–µ—Å –≤ 2025 ‚Äî –∏ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é —Å –ø–æ–º–æ—â—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏."
    )
    
    # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É
    await asyncio.sleep(1)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ 2 —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    keyboard = [[pred] for pred in PREDICTIONS]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    message = await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –≤—ã–ø–∞–ª–æ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ üÉè\n"
        "(–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–æ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏—Ç—è–Ω—É—Ç—å –≤ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å üëá)",
        reply_markup=reply_markup
    )
    
    user_data['last_button_message_id'] = message.message_id
    
    return CHOOSING_PREDICTION


async def handle_prediction_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞
    if text not in PREDICTIONS:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        user_data['messages_to_delete'].append(update.message.message_id)
        msg = await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá"
        )
        user_data['messages_to_delete'].append(msg.message_id)
        return CHOOSING_PREDICTION
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        if user_data['last_button_message_id']:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=user_data['last_button_message_id'])
        for msg_id in user_data['messages_to_delete']:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg_id)
            except:
                pass
        user_data['messages_to_delete'] = []
    except Exception as e:
        logger.error(f"Error deleting messages: {e}")
    
    user_data['prediction'] = text
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ 3 —Å –≤—ã–±–æ—Ä–æ–º —Å—Ñ–µ—Ä—ã
    keyboard = [[sphere] for sphere in SPHERES]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    message = await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä üòé\n"
        "–ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–≤–æ—ë –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ.\n"
        "–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–≤–æ–π –±–∏–∑–Ω–µ—Å? üëá",
        reply_markup=reply_markup
    )
    
    user_data['last_button_message_id'] = message.message_id
    
    return CHOOSING_SPHERE


async def handle_sphere_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ñ–µ—Ä—ã –±–∏–∑–Ω–µ—Å–∞."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞
    if text not in SPHERES:
        user_data['messages_to_delete'].append(update.message.message_id)
        msg = await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—Ñ–µ—Ä, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá"
        )
        user_data['messages_to_delete'].append(msg.message_id)
        return CHOOSING_SPHERE
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        if user_data['last_button_message_id']:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=user_data['last_button_message_id'])
        for msg_id in user_data['messages_to_delete']:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg_id)
            except:
                pass
        user_data['messages_to_delete'] = []
        user_data['last_button_message_id'] = None
    except Exception as e:
        logger.error(f"Error deleting messages: {e}")
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î—Ä—É–≥–æ–µ", –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Å—Ñ–µ—Ä—É
    if text == "üèó –î—Ä—É–≥–æ–µ":
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å—Ñ–µ—Ä—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–≤–æ–π –±–∏–∑–Ω–µ—Å",
            reply_markup=ReplyKeyboardRemove()
        )
        return WAITING_CUSTOM_SPHERE
    
    user_data['sphere'] = text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å—Ñ–µ—Ä—É
    user_data['prediction_history'].append({
        'prediction': user_data['prediction'],
        'sphere': user_data['sphere']
    })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    await send_api_request(update, context, user_data)
    
    return IN_CHAT_MODE


async def handle_custom_sphere(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ñ–µ—Ä—ã –±–∏–∑–Ω–µ—Å–∞."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ñ–µ—Ä—É
    user_data['sphere'] = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å—Ñ–µ—Ä—É
    user_data['prediction_history'].append({
        'prediction': user_data['prediction'],
        'sphere': user_data['sphere']
    })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    await send_api_request(update, context, user_data)
    
    return IN_CHAT_MODE


async def send_api_request(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data: Dict, user_message: Optional[str] = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–Ω–µ—à–Ω–µ–º—É API."""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_token = await get_auth_token()
    if not auth_token:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è API
    if user_message is None:
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –∏ —Å—Ñ–µ—Ä–æ–π
        content = f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {user_data['prediction']}, –°—Ñ–µ—Ä–∞: {user_data['sphere']}"
    else:
        # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        content = user_message
    
    payload = {
        "scenario_id": "conf-bot",
        "state": {
            "messages": [
                {
                    "role": "user",
                    "content": content
                }
            ]
        },
        "channel_id": "1",
        "dialog_id": user_data['dialog_id'],
        "llm_model": "anthropic/claude-sonnet-4"
    }
    
    headers = {
        "Authorization": f"Bearer {auth_token}",
        "Content-Type": "application/json"
    }
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(API_URL, json=payload, headers=headers)
            response.raise_for_status()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
            api_response = response.json()
            logger.info(f"API response: {api_response}")
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = parse_api_response(api_response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            for i, message_text in enumerate(messages):
                if i > 0:
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                    await asyncio.sleep(0.5)
                
                # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                if i == len(messages) - 1:
                    await update.message.reply_text(message_text, reply_markup=ReplyKeyboardRemove())
                else:
                    await update.message.reply_text(message_text)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            if user_message is None:
                await asyncio.sleep(1)
                await show_action_buttons(update, context, user_data)
        
    except httpx.HTTPError as e:
        logger.error(f"API request error: {e}")
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )


async def show_action_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data: Dict) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    keyboard = [
        ["üîç –•–æ—á—É —Ç–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞"],
        ["üîÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    message = await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=reply_markup
    )
    
    user_data['last_button_message_id'] = message.message_id


async def handle_chat_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ —Å API."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–µ–π—Å—Ç–≤–∏—è
    if text == "üîç –•–æ—á—É —Ç–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞":
        return await handle_analysis_request(update, context)
    elif text == "üîÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
        return await handle_restart(update, context)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –ø—Ä–æ—Å–∏–º –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–∏—Ö
    if user_data['last_button_message_id']:
        user_data['messages_to_delete'].append(update.message.message_id)
        msg = await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá"
        )
        user_data['messages_to_delete'].append(msg.message_id)
        return IN_CHAT_MODE
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ API
    await send_api_request(update, context, user_data, text)
    
    return IN_CHAT_MODE


async def handle_analysis_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å–∞."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        if user_data['last_button_message_id']:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=user_data['last_button_message_id'])
        for msg_id in user_data['messages_to_delete']:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg_id)
            except:
                pass
        user_data['messages_to_delete'] = []
        user_data['last_button_message_id'] = None
    except Exception as e:
        logger.error(f"Error deleting messages: {e}")
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ 6
    await update.message.reply_text(
        "–ö—Ä—É—Ç–æ üí™\n"
        "–Ø —Å–æ–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç, –≥–¥–µ –ø–æ–∫–∞–∂—É —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞ —Ç–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.\n"
        "–ù–∞–ø–∏—à–∏, –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è üëá",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return WAITING_NAME


async def handle_restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        if user_data['last_button_message_id']:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=user_data['last_button_message_id'])
        for msg_id in user_data['messages_to_delete']:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg_id)
            except:
                pass
        user_data['messages_to_delete'] = []
    except Exception as e:
        logger.error(f"Error deleting messages: {e}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π dialog_id
    user_data['dialog_id'] = str(uuid.uuid4())
    user_data['prediction'] = None
    user_data['sphere'] = None
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    keyboard = [[pred] for pred in PREDICTIONS]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    message = await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –≤—ã–ø–∞–ª–æ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ üÉè\n"
        "(–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–æ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏—Ç—è–Ω—É—Ç—å –≤ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å üëá)",
        reply_markup=reply_markup
    )
    
    user_data['last_button_message_id'] = message.message_id
    
    return CHOOSING_PREDICTION


async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    user_data['name'] = update.message.text
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ 7
    keyboard = [
        ["üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"],
        ["üìß –£–∫–∞–∑–∞—Ç—å e-mail"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    message = await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ!\n"
        "–ö—É–¥–∞ –ø—Ä–∏—Å–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è—è —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ Nikta.ai",
        reply_markup=reply_markup
    )
    
    user_data['last_button_message_id'] = message.message_id
    
    return CHOOSING_CONTACT_TYPE


async def handle_contact_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    text = update.message.text
    
    if text not in ["üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", "üìß –£–∫–∞–∑–∞—Ç—å e-mail"]:
        user_data['messages_to_delete'].append(update.message.message_id)
        msg = await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá"
        )
        user_data['messages_to_delete'].append(msg.message_id)
        return CHOOSING_CONTACT_TYPE
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        if user_data['last_button_message_id']:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=user_data['last_button_message_id'])
        for msg_id in user_data['messages_to_delete']:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg_id)
            except:
                pass
        user_data['messages_to_delete'] = []
        user_data['last_button_message_id'] = None
    except Exception as e:
        logger.error(f"Error deleting messages: {e}")
    
    if text == "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëá",
            reply_markup=reply_markup
        )
        
        return WAITING_PHONE
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π e-mail",
            reply_markup=ReplyKeyboardRemove()
        )
        
        return WAITING_EMAIL


async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    if update.message.contact:
        phone = update.message.contact.phone_number
        user_data['contact'] = f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        
        await send_final_message(update, context)
        
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëá"
        )
        return WAITING_PHONE


async def handle_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è email."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    email = update.message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    
    if not re.match(email_pattern, email):
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ e-mail –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        )
        return WAITING_EMAIL
    
    user_data['contact'] = f"Email: {email}"
    
    await send_final_message(update, context)
    
    return ConversationHandler.END


async def send_report_to_channel(context: ContextTypes.DEFAULT_TYPE, user_data: Dict, user: Any) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ –∫–∞–Ω–∞–ª."""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        report_lines = [
            "üìä <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>",
            "",
            f"üë§ <b>–ò–º—è:</b> {user_data['name']}",
            f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {user_data['contact']}",
            f"üÜî <b>Telegram ID:</b> {user.id}",
            f"üë®‚Äçüíº <b>Username:</b> @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
            "",
            "<b>üìà –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:</b>"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        for i, entry in enumerate(user_data['prediction_history'], 1):
            report_lines.append(f"\n<b>–ü–æ–ø—ã—Ç–∫–∞ {i}:</b>")
            report_lines.append(f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {entry['prediction']}")
            report_lines.append(f"üè¢ –°—Ñ–µ—Ä–∞: {entry['sphere']}")
        
        report_text = "\n".join(report_lines)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –∫–∞–Ω–∞–ª
        await context.bot.send_message(
            chat_id=REPORT_CHANNEL_ID,
            text=report_text,
            parse_mode='HTML'
        )
        logger.info(f"Report sent to channel for user {user.id}")
    except Exception as e:
        logger.error(f"Error sending report to channel: {e}")


async def send_final_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –∫–∞–Ω–∞–ª
    await send_report_to_channel(context, user_data, update.effective_user)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ 8
    await update.message.reply_text(
        "üéØ –ì–æ—Ç–æ–≤–æ!\n"
        "–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ —à—Ç–∞–± Nikta.ai üöÄ\n"
        "–ê –ø–æ–∫–∞ - –∑–∞–≥–ª—è–Ω–∏:\n"
        "üåê nikta.ai - –ø–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.\n"
        "üí¨ @nikta_ai - –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª —Å –∫–µ–π—Å–∞–º–∏ –∏ —Å–≤–µ–∂–∏–º–∏ –∏–¥–µ—è–º–∏.",
        reply_markup=ReplyKeyboardRemove(),
        disable_web_page_preview=True
    )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞."""
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN not found in environment variables")
        return
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞—ë–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_PREDICTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_prediction_choice)
            ],
            CHOOSING_SPHERE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_sphere_choice)
            ],
            WAITING_CUSTOM_SPHERE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_sphere)
            ],
            IN_CHAT_MODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_chat_message)
            ],
            WAITING_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)
            ],
            CHOOSING_CONTACT_TYPE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact_type)
            ],
            WAITING_PHONE: [
                MessageHandler(filters.CONTACT, handle_phone),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone)
            ],
            WAITING_EMAIL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_email)
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CommandHandler('start', start)
        ],
        allow_reentry=True
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Bot started")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()

